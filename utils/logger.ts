/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
 * –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å console.log –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ
 */

type LogLevel = 'log' | 'info' | 'warn' | 'error' | 'debug';

interface Logger {
  log: (message: string, ...args: any[]) => void;
  info: (message: string, ...args: any[]) => void;
  warn: (message: string, ...args: any[]) => void;
  error: (message: string, ...args: any[]) => void;
  debug: (message: string, ...args: any[]) => void;
}

class DevLogger implements Logger {
  private createLogMethod = (level: LogLevel) => {
    return (message: string, ...args: any[]) => {
      // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      // if (!__DEV__ && level === 'error') {
      //   // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Crashlytics, Sentry –∏ —Ç.–¥.
      // }
    };
  };

  log = this.createLogMethod('log');
  info = this.createLogMethod('info');
  warn = this.createLogMethod('warn');
  error = this.createLogMethod('error');
  debug = this.createLogMethod('debug');
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const logger = new DevLogger();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
export const apiLogger = {
  request: (url: string, method: string, data?: any) => {
    logger.debug(`üåê API Request: ${method} ${url}`, data);
  },
  response: (url: string, status: number, data?: any) => {
    logger.debug(`üì° API Response: ${status} ${url}`, data);
  },
  error: (url: string, error: any) => {
    logger.error(`‚ùå API Error: ${url}`, error);
  },
};

export const authLogger = {
  login: (success: boolean, user?: any) => {
    logger.info(success ? '‚úÖ Login successful' : '‚ùå Login failed', user);
  },
  logout: () => {
    logger.info('üö™ User logged out');
  },
  tokenRefresh: (success: boolean) => {
    logger.debug(success ? 'üîÑ Token refreshed' : '‚ùå Token refresh failed');
  },
};

export const navigationLogger = {
  navigate: (screen: string, params?: any) => {
    logger.debug(`üß≠ Navigate to: ${screen}`, params);
  },
  goBack: () => {
    logger.debug('‚¨ÖÔ∏è Navigate back');
  },
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
export const performanceLogger = {
  start: (label: string) => {
    if (typeof __DEV__ !== 'undefined' && __DEV__) {
      console.time(label);
    }
  },
  end: (label: string) => {
    if (typeof __DEV__ !== 'undefined' && __DEV__) {
      console.timeEnd(label);
    }
  },
  mark: (label: string, message?: string) => {
    if (typeof __DEV__ !== 'undefined' && __DEV__) {
      const timestamp = performance.now();
      logger.debug(`‚è±Ô∏è ${label}: ${timestamp.toFixed(2)}ms${message ? ` - ${message}` : ''}`);
    }
  },
};

export default logger;