import AsyncStorage from '@react-native-async-storage/async-storage';
import {
    buildLDAPUrl,
    getLDAPEndpoint,
    isDebugMode
} from '../config/environment';
import {
    ApiResponse,
    LDAPCourse,
    LDAPLoginResponse,
    LDAPRefreshRequest,
    LDAPUserProfile,
    LoginCredentials
} from '../types';

class LDAPAuthService {
  private accessToken: string | null = null;
  private refreshToken: string | null = null;
  private tokenRefreshPromise: Promise<string | null> | null = null;

  constructor() {
    this.initializeTokens();
  }

  private async initializeTokens(): Promise<void> {
    try {
      const [access, refresh] = await Promise.all([
        AsyncStorage.getItem('ldap_access_token'),
        AsyncStorage.getItem('ldap_refresh_token')
      ]);
      
      this.accessToken = access;
      this.refreshToken = refresh;
      
      if (isDebugMode()) {
        console.log('üîë LDAP tokens initialized:', {
          hasAccess: !!this.accessToken,
          hasRefresh: !!this.refreshToken
        });
      }
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to initialize LDAP tokens:', error);
      }
    }
  }

  private async makeRequest<T>(
    url: string, 
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      if (isDebugMode()) {
        console.log('üåê LDAP API Request:', { url, method: options.method || 'GET' });
      }

      const response = await fetch(url, {
        ...options,
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      const data = await response.json();

      if (!response.ok) {
        const errorMessage = data.error || data.message || `HTTP ${response.status}`;
        if (isDebugMode()) {
          console.error('‚ùå LDAP API Error:', { status: response.status, error: errorMessage });
        }
        return {
          success: false,
          error: errorMessage,
        };
      }

      if (isDebugMode()) {
        console.log('‚úÖ LDAP API Success:', { status: response.status });
      }

      return {
        success: true,
        data: data,
      };
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Network error';
      if (isDebugMode()) {
        console.error('‚ùå LDAP Network Error:', errorMessage);
      }
      return {
        success: false,
        error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É',
      };
    }
  }

  private async makeAuthenticatedRequest<T>(
    url: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const token = await this.getValidAccessToken();
    
    if (!token) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      };
    }

    return this.makeRequest<T>(url, {
      ...options,
      headers: {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
      },
    });
  }

  private async getValidAccessToken(): Promise<string | null> {
    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å –∏ –æ–Ω —Å–≤–µ–∂–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.accessToken && this.isTokenValid(this.accessToken)) {
      return this.accessToken;
    }

    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, –∂–¥–µ–º –µ–≥–æ
    if (this.tokenRefreshPromise) {
      return this.tokenRefreshPromise;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    this.tokenRefreshPromise = this.refreshAccessToken();
    const newToken = await this.tokenRefreshPromise;
    this.tokenRefreshPromise = null;
    
    return newToken;
  }

  private isTokenValid(token: string): boolean {
    try {
      // JWT —Ç–æ–∫–µ–Ω —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏
      const parts = token.split('.');
      if (parts.length !== 3) return false;

      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
      const payload = JSON.parse(atob(parts[1]));
      const currentTime = Math.floor(Date.now() / 1000);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫ (—Å –∑–∞–ø–∞—Å–æ–º 5 –º–∏–Ω—É—Ç)
      return payload.exp && payload.exp > (currentTime + 300);
    } catch (error) {
      if (isDebugMode()) {
        console.warn('‚ö†Ô∏è Failed to validate token:', error);
      }
      return false;
    }
  }

  private async refreshAccessToken(): Promise<string | null> {
    if (!this.refreshToken) {
      if (isDebugMode()) {
        console.log('‚ùå No refresh token available');
      }
      return null;
    }

    try {
      if (isDebugMode()) {
        console.log('üîÑ Refreshing access token...');
      }

      const refreshData: LDAPRefreshRequest = {
        refresh_token: this.refreshToken,
      };

      const response = await this.makeRequest<{ access_token: string; refresh_token: string }>(
        getLDAPEndpoint('REFRESH'),
        {
          method: 'POST',
          body: JSON.stringify(refreshData),
        }
      );

      if (response.success && response.data?.access_token) {
        this.accessToken = response.data.access_token;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º refresh token –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏—à–µ–ª –≤ –æ—Ç–≤–µ—Ç–µ
        if (response.data.refresh_token) {
          this.refreshToken = response.data.refresh_token;
          await AsyncStorage.setItem('ldap_refresh_token', this.refreshToken);
        }
        
        await AsyncStorage.setItem('ldap_access_token', this.accessToken);
        
        if (isDebugMode()) {
          console.log('‚úÖ Tokens refreshed successfully');
        }
        
        return this.accessToken;
      } else {
        if (isDebugMode()) {
          console.error('‚ùå Failed to refresh token:', response.error);
        }
        // –û—á–∏—â–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
        await this.clearTokens();
        return null;
      }
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Token refresh error:', error);
      }
      await this.clearTokens();
      return null;
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

  async login(credentials: LoginCredentials): Promise<ApiResponse<LDAPLoginResponse>> {
    try {
      if (isDebugMode()) {
        console.log('üîê LDAP Login attempt for user:', credentials.username);
      }

      const response = await this.makeRequest<LDAPLoginResponse>(
        getLDAPEndpoint('LOGIN'),
        {
          method: 'POST',
          body: JSON.stringify(credentials),
        }
      );

      if (response.success && response.data) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
        this.accessToken = response.data.access_token;
        this.refreshToken = response.data.refresh_token;

        await Promise.all([
          AsyncStorage.setItem('ldap_access_token', this.accessToken),
          AsyncStorage.setItem('ldap_refresh_token', this.refreshToken),
        ]);

        if (isDebugMode()) {
          console.log('‚úÖ LDAP login successful, tokens saved');
        }
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå LDAP login error:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      };
    }
  }

  async logout(): Promise<void> {
    if (isDebugMode()) {
      console.log('üö™ LDAP logout');
    }

    await this.clearTokens();
  }

  private async clearTokens(): Promise<void> {
    this.accessToken = null;
    this.refreshToken = null;
    this.tokenRefreshPromise = null;

    try {
      await Promise.all([
        AsyncStorage.removeItem('ldap_access_token'),
        AsyncStorage.removeItem('ldap_refresh_token'),
      ]);
      
      if (isDebugMode()) {
        console.log('üßπ LDAP tokens cleared');
      }
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to clear tokens:', error);
      }
    }
  }

  async isAuthenticated(): Promise<boolean> {
    const token = await this.getValidAccessToken();
    return !!token;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LDAP API

  async getUserProfile(): Promise<ApiResponse<LDAPUserProfile>> {
    return this.makeAuthenticatedRequest<LDAPUserProfile>(
      getLDAPEndpoint('PROFILE'),
      { method: 'POST' }
    );
  }

  async getActiveCourses(params?: {
    lang?: string;
    page?: number;
    pageSize?: number;
    skip?: number;
    take?: number;
  }): Promise<ApiResponse<{ count: number; data: LDAPCourse[] }>> {
    const defaultParams = {
      lang: 'en',
      page: 1,
      pageSize: 10,
      skip: 0,
      take: 10,
      ...params,
    };

    const url = buildLDAPUrl('COURSES', {
      lang: defaultParams.lang,
      page: defaultParams.page.toString(),
      pageSize: defaultParams.pageSize.toString(),
      skip: defaultParams.skip.toString(),
      take: defaultParams.take.toString(),
    });

    return this.makeAuthenticatedRequest<{ count: number; data: LDAPCourse[] }>(url, {
      method: 'GET',
    });
  }

  async getCourseGrades(): Promise<ApiResponse<any[]>> {
    return this.makeAuthenticatedRequest<any[]>(
      getLDAPEndpoint('GRADES'),
      { method: 'GET' }
    );
  }

  async getCourseAttendance(): Promise<ApiResponse<any[]>> {
    return this.makeAuthenticatedRequest<any[]>(
      getLDAPEndpoint('ATTENDANCE'),
      { method: 'GET' }
    );
  }

  async getMessages(): Promise<ApiResponse<any[]>> {
    return this.makeAuthenticatedRequest<any[]>(
      getLDAPEndpoint('MESSAGES'),
      { method: 'POST' }
    );
  }

  async uploadImage(imageData: any): Promise<ApiResponse<any>> {
    const token = await this.getValidAccessToken();
    
    if (!token) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      };
    }

    try {
      const response = await fetch(getLDAPEndpoint('IMAGE'), {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
        },
        body: imageData, // FormData for image upload
      });

      const data = await response.json();

      if (!response.ok) {
        return {
          success: false,
          error: data.error || data.message || `HTTP ${response.status}`,
        };
      }

      return {
        success: true,
        data: data,
      };
    } catch (error) {
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const ldapAuthService = new LDAPAuthService();
export default LDAPAuthService;
