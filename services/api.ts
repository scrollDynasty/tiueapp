import AsyncStorage from '@react-native-async-storage/async-storage';
import { getApiBaseUrl } from '../config/environment';
import { ApiResponse, LoginCredentials, User } from '../types';

const API_BASE_URL = getApiBaseUrl();

class ApiService {
  private async getHeaders(): Promise<Record<string, string>> {
    // –î–∞–µ–º –≤—Ä–µ–º—è AsyncStorage –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    await new Promise(resolve => setTimeout(resolve, 100));
    const token = await AsyncStorage.getItem('authToken');
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'ngrok-skip-browser-warning': 'true', // –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ngrok
    };
    
    if (token && token !== 'undefined' && token !== 'null') {
      headers.Authorization = `Token ${token}`;
    }
    
    return headers;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const headers = await this.getHeaders();
      const url = `${API_BASE_URL}${endpoint}`;
      
      const finalHeaders = {
        ...headers,
        ...options.headers,
      };
      
      // Avoid logging URLs with sensitive identifiers
      // console.log(`üåê Making request to: ${url}`); // REMOVED: may contain sensitive info (userId etc.)
      
      const response = await fetch(url, {
        ...options,
        headers: finalHeaders,
      });

      
      const data = await response.json();

      if (!response.ok) {
        return {
          success: false,
          error: data.error || data.message || `HTTP ${response.status}`,
        };
      }

      return {
        success: true,
        data: data.data || data, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ wrapped, —Ç–∞–∫ –∏ unwrapped –æ—Ç–≤–µ—Ç—ã
      };
    } catch (error) {
      return {
        success: false,
        error: 'Network error occurred',
      };
    }
  }

  async login(credentials: LoginCredentials): Promise<ApiResponse<{ user: User; token: string }>> {
    // –î–ª—è login –∑–∞–ø—Ä–æ—Å–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º getHeaders (—Ç–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω)
    const timestamp = Date.now();
    const response = await fetch(`${API_BASE_URL}/auth/login/?t=${timestamp}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0',
      },
      body: JSON.stringify(credentials),
    });


    try {
      const data = await response.json();

      if (!response.ok) {
        let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
        
        if (response.status === 401) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        } else if (response.status === 400) {
          errorMessage = data.error || data.message || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞';
        } else if (response.status === 500) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ';
        } else if (response.status >= 500) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        } else {
          errorMessage = data.error || data.message || `–û—à–∏–±–∫–∞ ${response.status}`;
        }
        
        return {
          success: false,
          error: errorMessage,
        };
      }

      const result = {
        success: true,
        data: data.data, // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º data.data –¥–ª—è login endpoint
      };
      

      if (result.success && result.data) {
        if (__DEV__) {
          console.log('üíæ Saving token to storage:', result.data.token ? `${result.data.token.substring(0, 10)}...` : 'No token');
          // SECURITY: Never log full tokens, even in dev
        }
        
        // –ü–û–õ–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ AsyncStorage –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
        if (__DEV__) {
          console.log('üßπ Completely clearing AsyncStorage...');
        }
        await AsyncStorage.clear();
        await new Promise(resolve => setTimeout(resolve, 100)); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
        
        await AsyncStorage.setItem('authToken', result.data.token);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
        const savedToken = await AsyncStorage.getItem('authToken');
        if (__DEV__) {
          console.log('‚úÖ Token saved successfully:', savedToken ? `${savedToken.substring(0, 10)}...` : 'Failed to save');
        }
        
        // –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        if (savedToken !== result.data.token) {
          if (__DEV__) {
            console.error('‚ùå Token mismatch! Expected:', result.data.token.substring(0, 10), 'Got:', savedToken?.substring(0, 10));
          }
          // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ—â–µ —Ä–∞–∑
          await AsyncStorage.setItem('authToken', result.data.token);
          const retryToken = await AsyncStorage.getItem('authToken');
          if (__DEV__) {
            console.log('üîÑ Retry save result:', retryToken ? `${retryToken.substring(0, 10)}...` : 'Still failed');
          }
        }
      }

      return result;
    } catch (error) {
      return {
        success: false,
        error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É',
      };
    }
  }

  async logout(): Promise<void> {
    // Optional: call backend logout endpoint BEFORE removing token
    try {
      await this.request('/auth/logout/', { method: 'POST' });
    } catch (error) {
      // Ignore errors during logout
    }
    // Remove token from storage after backend call (or if it fails)
    if (__DEV__) {
      console.log('üóëÔ∏è Clearing token from storage');
    }
    await AsyncStorage.removeItem('authToken');
    if (__DEV__) {
      console.log('‚úÖ Token cleared successfully');
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ storage
  async clearStorage(): Promise<void> {
    if (__DEV__) {
      console.log('üßπ Clearing all AsyncStorage');
    }
    await AsyncStorage.clear();
    if (__DEV__) {
      console.log('‚úÖ AsyncStorage cleared');
    }
  }

  async getCurrentUser(): Promise<ApiResponse<User>> {
    if (__DEV__) {
      console.log('üë§ Getting current user...');
    }
    const result = await this.request<User>('/auth/me/');
    if (__DEV__) {
      console.log('üë§ getCurrentUser result:', result.success ? 'Success' : `Failed: ${result.error}`);
    }
    return result;
  }

  // User management (admin only)
  async getUsers(): Promise<ApiResponse<User[]>> {
    return this.request<User[]>('/users/');
  }

  async createUser(userData: Partial<User>): Promise<ApiResponse<User>> {
    return this.request<User>('/users/', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  }

  async updateUser(userId: string, userData: Partial<User>): Promise<ApiResponse<User>> {
    return this.request<User>(`/users/${userId}/`, {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  }

  async deleteUser(userId: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/users/${userId}/`, {
      method: 'DELETE',
    });
  }

  // Groups management
  async getGroups(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/groups/');
  }

  async createGroup(groupData: any): Promise<ApiResponse<any>> {
    return this.request<any>('/groups/', {
      method: 'POST',
      body: JSON.stringify(groupData),
    });
  }

  // Schedule management
  async getSchedule(groupId?: string): Promise<ApiResponse<any[]>> {
    const endpoint = groupId ? `/schedule/?group=${groupId}` : '/schedule/';
    return this.request<any[]>(endpoint);
  }

  async updateSchedule(scheduleData: any): Promise<ApiResponse<any>> {
    return this.request<any>('/schedule/', {
      method: 'POST',
      body: JSON.stringify(scheduleData),
    });
  }

  // News management
  async getNews(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/news/');
  }

  async createNews(newsData: any): Promise<ApiResponse<any>> {
    try {
      const token = await AsyncStorage.getItem('authToken');
      const url = `${API_BASE_URL}/news/`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData
      if (newsData.image) {
        const formData = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–æ–≤–æ—Å—Ç–∏
        formData.append('title', newsData.title);
        formData.append('subtitle', newsData.subtitle || '');
        formData.append('content', newsData.content);
        formData.append('category', newsData.category);
        if (newsData.icon) {
          formData.append('icon', newsData.icon);
        }
        if (newsData.is_important !== undefined) {
          formData.append('is_important', newsData.is_important.toString());
        }

        const imageUri = newsData.image.uri;
        const timestamp = Date.now();
        const filename = `news_${timestamp}.jpg`;
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è FormData –≤ React Native
        const imageFile = {
          uri: imageUri,
          type: 'image/jpeg',
          name: filename,
        } as any;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
        formData.append('image', imageFile);

        const apiResponse = await fetch(url, {
          method: 'POST',
          headers: {
            'Authorization': token ? `Token ${token}` : '',
            // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è multipart/form-data
          },
          body: formData,
        });

        const data = await apiResponse.json();

        if (!apiResponse.ok) {
          return {
            success: false,
            error: data.error || data.message || `HTTP ${apiResponse.status}`,
          };
        }

        return {
          success: true,
          data: data.data || data,
        };
      } else {
        // –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π JSON
        return this.request<any>('/news/', {
          method: 'POST',
          body: JSON.stringify(newsData),
        });
      }
    } catch (error) {
      console.error('Create news error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      };
    }
  }

  async updateNews(newsId: string, newsData: any): Promise<ApiResponse<any>> {
    return this.request<any>(`/news/${newsId}/`, {
      method: 'PUT',
      body: JSON.stringify(newsData),
    });
  }

  async deleteNews(newsId: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/news/${newsId}/`, {
      method: 'DELETE',
    });
  }

  // Events management
  async getEvents(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/events/');
  }

  async createEvent(eventData: any): Promise<ApiResponse<any>> {
    try {
      const token = await AsyncStorage.getItem('authToken');
      const url = `${API_BASE_URL}/events/`;

      // Log intent
      if (__DEV__) {
        console.log('üÜï createEvent(): preparing payload', {
          hasImage: !!eventData.image,
          title: eventData?.title,
        });
      }

      if (eventData.image) {
        const formData = new FormData();
        formData.append('title', eventData.title);
        formData.append('description', eventData.description);
        formData.append('location', eventData.location);
        formData.append('date', eventData.date);
        formData.append('time', eventData.time);
        formData.append('category', eventData.category);
        if (eventData.max_participants) {
          formData.append('max_participants', eventData.max_participants.toString());
        }

        let imageUri = eventData.image.uri;
        if (__DEV__) {
          console.log('üñº createEvent(): image object', eventData.image);
        }
        if (!imageUri) {
          if (__DEV__) {
            console.warn('‚ö†Ô∏è createEvent(): image object missing uri');
          }
        } else if (imageUri.startsWith('/')) {
          // Normalize plain path to file:// for Android
            imageUri = 'file://' + imageUri;
            if (__DEV__) {
              console.log('üõ† createEvent(): normalized uri ->', imageUri);
            }
        }

        const now = new Date();
        const filename = `evt_${now.getTime()}.jpg`;

        // React Native-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const imageFile = {
          uri: imageUri,
          type: 'image/jpeg',
          name: filename,
        } as any;
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
        formData.append('image', imageFile);
        if (__DEV__) {
          console.log('üì§ createEvent(): added image object', { name: filename, uri: imageUri });
        }

        if (__DEV__) {
          console.log('üì§ createEvent(): sending multipart request', { url });
        }

        let apiResponse: Response;
        try {
          apiResponse = await fetch(url, {
            method: 'POST',
            headers: {
              'Authorization': token ? `Token ${token}` : '',
            },
            body: formData,
          });
        } catch (networkErr: any) {
          if (__DEV__) {
            console.error('üåê createEvent(): network layer failure', networkErr?.message || networkErr);
            console.log('üí° Hint: If using ngrok, ensure tunnel is active and device can reach it (same Wi-Fi, not asleep).');
            console.log('‚Ü©Ô∏è Fallback: try create WITHOUT image');
          }
          try {
            const fallback = await this.request<any>('/events/', {
              method: 'POST',
              body: JSON.stringify({
                title: eventData.title,
                description: eventData.description,
                location: eventData.location,
                date: eventData.date,
                time: eventData.time,
                category: eventData.category,
                max_participants: eventData.max_participants,
              }),
            });
            if (fallback.success) {
              return { success: true, data: fallback.data, error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (fallback)' };
            }
            return { success: false, error: '–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (multipart) –∏ fallback –Ω–µ —É–¥–∞–ª—Å—è' };
          } catch (fbErr) {
            if (__DEV__) {
              console.error('‚ùå createEvent(): fallback failed', fbErr);
            }
            return { success: false, error: '–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (multipart)' };
          }
        }

        let data: any = null;
        try {
          data = await apiResponse.json();
        } catch (parseErr) {
          if (__DEV__) {
            console.error('üß© createEvent(): JSON parse failed', parseErr);
          }
        }

        if (!apiResponse.ok) {
          if (__DEV__) {
            console.error('‚ùå createEvent(): server responded with error status', apiResponse.status, data);
          }
          return { success: false, error: data?.error || data?.message || `HTTP ${apiResponse.status}` };
        }

        if (__DEV__) {
          console.log('‚úÖ createEvent(): success (multipart)');
        }
        return { success: true, data: data?.data || data };
      } else {
        return this.request<any>('/events/', {
          method: 'POST',
          body: JSON.stringify(eventData),
        });
      }
    } catch (error) {
      console.error('Create event error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      };
    }
  }

  async updateEvent(eventId: string, eventData: any): Promise<ApiResponse<any>> {
    return this.request<any>(`/events/${eventId}/`, {
      method: 'PUT',
      body: JSON.stringify(eventData),
    });
  }

  async deleteEvent(eventId: string): Promise<ApiResponse<void>> {
    try {
      if (__DEV__) {
        console.log('üîß API deleteEvent: Starting delete for ID:', eventId);
      }
      
      const token = await AsyncStorage.getItem('authToken');
      const headers: Record<string, string> = {};
      
      if (token && token !== 'undefined' && token !== 'null') {
        headers.Authorization = `Token ${token}`;
      }
      
      const url = `${API_BASE_URL}/events/${eventId}/`;
      
      if (__DEV__) {
        console.log('üîß API deleteEvent: Making request to:', url);
        console.log('üîß API deleteEvent: Headers:', headers);
      }
      
      const response = await fetch(url, {
        method: 'DELETE',
        headers: headers,
      });

      if (__DEV__) {
        console.log('üîß API deleteEvent: Response status:', response.status);
        console.log('üîß API deleteEvent: Response ok:', response.ok);
      }

      // DELETE –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–∞—Ä—Å–∏–º JSON
      if (response.ok) {
        if (__DEV__) {
          console.log('üîß API deleteEvent: Success, returning');
        }
        return {
          success: true,
          data: undefined as any,
        };
      } else {
        if (__DEV__) {
          console.log('üîß API deleteEvent: Response not ok, trying to parse error');
        }
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
        try {
          const data = await response.json();
          if (__DEV__) {
            console.log('üîß API deleteEvent: Error data:', data);
          }
          return {
            success: false,
            error: data.error || data.message || `HTTP ${response.status}`,
          };
        } catch (parseError) {
          if (__DEV__) {
            console.log('üîß API deleteEvent: Failed to parse error JSON:', parseError);
          }
          return {
            success: false,
            error: `HTTP ${response.status}`,
          };
        }
      }
    } catch (error) {
      if (__DEV__) {
        console.log('üîß API deleteEvent: Caught exception:', error);
      }
      return {
        success: false,
        error: 'Network error occurred',
      };
    }
  }
}

export const authApi = new ApiService();
export default ApiService;
