import AsyncStorage from '@react-native-async-storage/async-storage';
import { Platform } from 'react-native';
import { getApiBaseUrl } from '../config/environment';
import { ApiResponse, LoginCredentials, User } from '../types';
import { cache, cacheKeys, cacheTTL, withCache } from '../utils/cache';

const API_BASE_URL = getApiBaseUrl();


class ApiService {
  private async getHeaders(): Promise<Record<string, string>> {
    // –î–∞–µ–º –≤—Ä–µ–º—è AsyncStorage –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ldap_access_token -> adminToken -> authToken
    let token = await AsyncStorage.getItem('ldap_access_token');
    let authType = 'Bearer';
    
    if (!token || token === 'undefined' || token === 'null') {
      token = await AsyncStorage.getItem('adminToken');
      authType = 'Token';
    }
    
    if (!token || token === 'undefined' || token === 'null') {
      token = await AsyncStorage.getItem('authToken');
      authType = 'Bearer';
    }
    
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };
    
    if (token && token !== 'undefined' && token !== 'null') {
      headers.Authorization = `${authType} ${token}`;
    }
    
    return headers;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const headers = await this.getHeaders();
      const url = `${API_BASE_URL}${endpoint}`;
      
      const finalHeaders = {
        ...headers,
        ...options.headers,
      };
      
      // Avoid logging URLs with sensitive identifiers
      // console.log(`üåê Making request to: ${url}`); // REMOVED: may contain sensitive info (userId etc.)
      
      const response = await fetch(url, {
        ...options,
        headers: finalHeaders,
      });

      
      const data = await response.json();

      if (!response.ok) {
        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
        
        if (response.status === 500) {
          errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';
        } else if (response.status === 403) {
          errorMessage = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.';
        } else if (response.status === 401) {
          errorMessage = '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.';
        } else if (response.status === 400) {
          errorMessage = data.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';
        } else {
          errorMessage = data.error || data.message || `–û—à–∏–±–∫–∞ ${response.status}`;
        }
        
        console.error('API Error:', { status: response.status, data, url: response.url });
        
        return {
          success: false,
          error: errorMessage,
        };
      }

      return {
        success: true,
        data: data.data || data, // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ wrapped, —Ç–∞–∫ –∏ unwrapped –æ—Ç–≤–µ—Ç—ã
      };
    } catch (error) {
      return {
        success: false,
        error: 'Network error occurred',
      };
    }
  }

  async login(credentials: LoginCredentials): Promise<ApiResponse<{ user: User; token: string }>> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –±—ç–∫–µ–Ω–¥ –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è LDAP –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const response = await fetch(`${API_BASE_URL}/auth/login/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(credentials),
      });

      const data = await response.json();

      if (!response.ok) {
        let errorMessage = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
        
        if (response.status === 401) {
          errorMessage = '–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å';
        } else if (response.status === 400) {
          errorMessage = data.error || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞';
        } else if (response.status === 503) {
          errorMessage = '–°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        } else {
          errorMessage = data.error || `–û—à–∏–±–∫–∞ ${response.status}`;
        }
        
        return {
          success: false,
          error: errorMessage,
        };
      }

      // Django –ø—Ä–æ–∫—Å–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {success: true, data: {...}}
      if (!data.success || !data.data) {
        return {
          success: false,
          error: data.error || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        };
      }

      const { access_token, refresh_token, user: ldapProfile, auth_type } = data.data;

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç User
      let user: User;
      let username: string;
      
      if (auth_type === 'local' && ldapProfile) {
        // –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        username = ldapProfile.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        let avatarUrl = null;
        try {
          const avatarResponse = await this.getUserAvatar(username);
          if (avatarResponse.success && avatarResponse.data?.avatar_url) {
            avatarUrl = avatarResponse.data.avatar_url;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ
        }
        
        user = {
          id: ldapProfile.id,
          username: username,
          email: ldapProfile.email || '',
          first_name: ldapProfile.first_name || '',
          last_name: ldapProfile.last_name || '',
          role: ldapProfile.role || 'admin',
          is_active: true,
          created_at: ldapProfile.created_at || new Date().toISOString(),
          updated_at: ldapProfile.updated_at || new Date().toISOString(),
          avatar: avatarUrl || undefined, // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        await AsyncStorage.setItem('adminToken', access_token);
        
      } else if (ldapProfile) {
        // LDAP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        username = credentials.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let avatarUrl = null;
        try {
          const avatarResponse = await this.getUserAvatar(username);
          if (avatarResponse.success && avatarResponse.data?.avatar_url) {
            avatarUrl = avatarResponse.data.avatar_url;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ
        }
        
        user = {
          id: ldapProfile.jshr || credentials.username,
          username: username,
          email: ldapProfile.email || `${credentials.username}@tiue.uz`,
          first_name: this.extractFirstName(ldapProfile.full_name || ''),
          last_name: this.extractLastName(ldapProfile.full_name || ''),
          role: 'student',
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          avatar: avatarUrl || undefined, // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π LDAP –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          ldap_profile: ldapProfile,
          student: {
            group: {
              name: ldapProfile.group || '',
              course: this.extractCourseFromGroup(ldapProfile.group || ''),
            },
            course: this.extractCourseFromGroup(ldapProfile.group || ''),
          },
        };
      } else {
        // –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        username = credentials.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        let avatarUrl = null;
        try {
          const avatarResponse = await this.getUserAvatar(username);
          if (avatarResponse.success && avatarResponse.data?.avatar_url) {
            avatarUrl = avatarResponse.data.avatar_url;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ
        }
        
        // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ LDAP –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω
        user = {
          id: credentials.username,
          username: username,
          email: `${credentials.username}@tiue.uz`,
          first_name: '',
          last_name: '',
          role: 'student',
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          avatar: avatarUrl || undefined, // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
      await Promise.all([
        AsyncStorage.setItem('authToken', access_token), // Legacy —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        AsyncStorage.setItem('ldap_access_token', access_token),
        AsyncStorage.setItem('ldap_refresh_token', refresh_token),
      ]);


      return {
        success: true,
        data: { user, token: access_token },
      };
    } catch (error) {
      if (__DEV__) {
        console.error('‚ùå Login error:', error);
      }
      return {
        success: false,
        error: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É',
      };
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ LDAP –¥–∞–Ω–Ω—ã—Ö
  private extractFirstName(fullName: string): string {
    if (!fullName) return '';
    const parts = fullName.trim().split(' ');
    // –í —Ñ–æ—Ä–º–∞—Ç–µ "–§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û" - –≤—Ç–æ—Ä–æ–µ —Å–ª–æ–≤–æ —ç—Ç–æ –∏–º—è
    const firstName = parts[1] || '';
    return firstName.charAt(0).toUpperCase() + firstName.slice(1).toLowerCase();
  }

  private extractLastName(fullName: string): string {
    if (!fullName) return '';
    const parts = fullName.trim().split(' ');
    // –í —Ñ–æ—Ä–º–∞—Ç–µ "–§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û" - –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ —ç—Ç–æ —Ñ–∞–º–∏–ª–∏—è
    const lastName = parts[0] || '';
    return lastName.charAt(0).toUpperCase() + lastName.slice(1).toLowerCase();
  }

  private extractCourseFromGroup(groupName: string): number {
    if (!groupName) return 1;
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É—Ä—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "RC-24-01"
    const match = groupName.match(/-(\d{2})-/);
    if (match) {
      const year = parseInt(match[1]);
      const currentYear = 25; // 2025
      return Math.max(1, currentYear - year + 1);
    }
    return 1;
  }

  async logout(): Promise<void> {
    try {
      // LDAP –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ logout, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
      await Promise.all([
        AsyncStorage.removeItem('authToken'),
        AsyncStorage.removeItem('ldap_access_token'),
        AsyncStorage.removeItem('ldap_refresh_token'),
      ]);
    } catch (error) {
      if (__DEV__) {
        console.error('‚ùå Error clearing tokens:', error);
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ dashboard
    this.clearUserCache();
    this.clearDashboardCache();
    
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ storage
  async clearStorage(): Promise<void> {

    await Promise.all([
      AsyncStorage.removeItem('authToken'),
      AsyncStorage.removeItem('ldap_access_token'),
      AsyncStorage.removeItem('ldap_refresh_token'),
    ]);
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏
    this.clearUserCache();
    this.clearDashboardCache();
    
  }

  // –ö–µ—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  private currentUserPromise: Promise<ApiResponse<User>> | null = null;
  private currentUserCache: { data: ApiResponse<User>; timestamp: number } | null = null;
  private readonly CACHE_DURATION = 30000; // 30 —Å–µ–∫—É–Ω–¥

  async getCurrentUser(): Promise<ApiResponse<User>> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.currentUserCache && 
        Date.now() - this.currentUserCache.timestamp < this.CACHE_DURATION) {
      return this.currentUserCache.data;
    }

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.currentUserPromise) {

      return this.currentUserPromise;
    }


    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ LDAP API
    this.currentUserPromise = this.getLDAPCurrentUser()
      .then((result) => {
        // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (result.success) {
          this.currentUserCache = {
            data: result,
            timestamp: Date.now()
          };
        }
        
        
        return result;
      })
      .finally(() => {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.currentUserPromise = null;
      });

    return this.currentUserPromise;
  }

  private async getLDAPCurrentUser(): Promise<ApiResponse<User>> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      let token = await AsyncStorage.getItem('ldap_access_token');
      let authType = 'Bearer';
      let isLocalAdmin = false;
      
      if (!token || token === 'undefined' || token === 'null') {
        token = await AsyncStorage.getItem('adminToken');
        authType = 'Token';
        isLocalAdmin = true;
      }
      
      if (!token || token === 'undefined' || token === 'null') {
        token = await AsyncStorage.getItem('authToken');
        authType = 'Bearer';
      }
      
      if (!token || token === 'undefined' || token === 'null') {
        return {
          success: false,
          error: 'Not authenticated',
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–∞—à –±—ç–∫–µ–Ω–¥
      // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π endpoint
      const endpoint = isLocalAdmin ? '/auth/me/' : '/auth/me/';
      const response = await fetch(`${API_BASE_URL}${endpoint}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `${authType} ${token}`,
        },
      });

      const data = await response.json();

      if (!response.ok) {
        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –Ω–µ –æ—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É
        if (response.status === 401) {
          // await this.clearStorage();
        }
        return {
          success: false,
          error: data.error || 'Failed to get user profile',
        };
      }

      if (!data.success || !data.data) {
        return {
          success: false,
          error: 'Invalid response format',
        };
      }

      let user: User;
      let username: string;

      if (isLocalAdmin) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const adminData = data.data.user;
        username = adminData.username;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        let avatarUrl = null;
        try {
          const avatarResponse = await this.getUserAvatar(username);
          if (avatarResponse.success && avatarResponse.data?.avatar_url) {
            avatarUrl = avatarResponse.data.avatar_url;
          }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
        }
        
        user = {
          id: adminData.id,
          username: username,
          email: adminData.email || '',
          first_name: adminData.first_name || '',
          last_name: adminData.last_name || '',
          role: adminData.role || 'admin',
          is_active: true,
          created_at: adminData.created_at || new Date().toISOString(),
          updated_at: adminData.updated_at || new Date().toISOString(),
          avatar: avatarUrl || undefined, // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
        };
      } else {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º LDAP –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç User
        const ldapProfile = data.data;
        username = ldapProfile.email ? ldapProfile.email.split('@')[0] : 'unknown';
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let avatarUrl = null;
        try {
          const avatarResponse = await this.getUserAvatar(username);
          if (avatarResponse.success && avatarResponse.data?.avatar_url) {
            avatarUrl = avatarResponse.data.avatar_url;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏
        }
        
        user = {
          id: ldapProfile.jshr || 'unknown',
          username: username,
          email: ldapProfile.email || '',
          first_name: this.extractFirstName(ldapProfile.full_name || ''),
          last_name: this.extractLastName(ldapProfile.full_name || ''),
          role: 'student',
          is_active: true,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          avatar: avatarUrl || undefined, // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π LDAP –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          ldap_profile: ldapProfile,
          student: {
            group: {
              name: ldapProfile.group || '',
              course: this.extractCourseFromGroup(ldapProfile.group || ''),
            },
            course: this.extractCourseFromGroup(ldapProfile.group || ''),
          },
        };
      }

      return {
        success: true,
        data: user,
      };
    } catch (error) {
      if (__DEV__) {
        console.error('‚ùå Failed to get LDAP user:', error);
      }
      return {
        success: false,
        error: 'Failed to get current user',
      };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ª–æ–≥–∞—É—Ç–µ)
  clearUserCache(): void {
    this.currentUserCache = null;
    this.currentUserPromise = null;
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async uploadAvatar(imageData: any): Promise<ApiResponse<{ avatar_url: string }>> {
    try {
      if (!imageData.uri) {
        return {
          success: false,
          error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ',
        };
      }

      const url = `${API_BASE_URL}/users/avatar/`;
      const formData = new FormData();
      
      const timestamp = Date.now();
      const filename = `avatar_${timestamp}.jpg`;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º Platform –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
      if (Platform.OS === 'web') {
        // –í–µ–±-–≤–µ—Ä—Å–∏—è - —Å–æ–∑–¥–∞–µ–º Blob –∏–∑ URI
        const response = await fetch(imageData.uri);
        const blob = await response.blob();
        formData.append('avatar', blob, filename);
      } else {
        // React Native (iOS/Android) - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç —Å uri/type/name
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è React Native
        let fileType = imageData.type || 'image/jpeg';
        if (fileType === 'image') {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
          const extension = imageData.uri.toLowerCase().split('.').pop();
          if (extension === 'png') {
            fileType = 'image/png';
          } else if (extension === 'webp') {
            fileType = 'image/webp';
          } else {
            fileType = 'image/jpeg'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          }
        }
        
        const fileToUpload = {
          uri: imageData.uri,
          type: fileType,
          name: filename,
        };
        
        // @ts-ignore - React Native FormData –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å uri/type/name
        formData.append('avatar', fileToUpload);
      }
      
      const headers = await this.getHeaders();
      // –£–¥–∞–ª—è–µ–º Content-Type, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä/RN —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å boundary
      delete headers['Content-Type'];
      
      // –î–ª—è React Native –∏—Å–ø–æ–ª—å–∑—É–µ–º XMLHttpRequest –∫–∞–∫ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
      if (Platform.OS !== 'web') {
        return new Promise((resolve) => {
          const xhr = new XMLHttpRequest();
          
          xhr.onload = () => {
            
            try {
              const data = JSON.parse(xhr.responseText);
              if (xhr.status >= 200 && xhr.status < 300) {
                resolve({
                  success: true,
                  data: data.data || data,
                });
              } else {
                resolve({
                  success: false,
                  error: data.error || data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞',
                });
              }
            } catch (parseError) {
              resolve({
                success: false,
                error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞',
              });
            }
          };
          
          xhr.onerror = () => {
            resolve({
              success: false,
              error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–≤–∞—Ç–∞—Ä–∞',
            });
          };
          
          xhr.ontimeout = () => {
            resolve({
              success: false,
              error: '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è',
            });
          };
          
          xhr.open('POST', url);
          xhr.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
          Object.keys(headers).forEach(key => {
            xhr.setRequestHeader(key, headers[key]);
          });
          
          xhr.send(formData);
        });
      }
      
      // –î–ª—è –≤–µ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π fetch
      const apiResponse = await fetch(url, {
        method: 'POST',
        headers: headers,
        body: formData,
      });

      const data = await apiResponse.json();

      if (!apiResponse.ok) {
        return {
          success: false,
          error: data.error || data.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞',
        };
      }

      return {
        success: true,
        data: data.data || data,
      };
      
    } catch (error) {
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞',
      };
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username (–¥–ª—è –¥—Ä—É–∑–µ–π)
  async getUserAvatar(username: string): Promise<ApiResponse<{ avatar_url: string | null; initials: string }>> {
    return this.request<{ avatar_url: string | null; initials: string }>(`/users/avatar/${username}/`);
  }

  // –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
  async searchStudents(params: {
    query?: string;
    course?: number;
    group?: string;
    limit?: number;
  }): Promise<ApiResponse<any[]>> {
    const searchParams = new URLSearchParams();
    
    if (params.query) {
      searchParams.append('q', params.query);
    }
    if (params.course) {
      searchParams.append('course', params.course.toString());
    }
    if (params.group) {
      searchParams.append('group', params.group);
    }
    if (params.limit) {
      searchParams.append('limit', params.limit.toString());
    }

    const queryString = searchParams.toString();
    const endpoint = `/auth/search/students/${queryString ? `?${queryString}` : ''}`;
    
    return this.request<any[]>(endpoint);
  }

  // User management (admin only)
  async getUsers(): Promise<ApiResponse<User[]>> {
    return this.request<User[]>('/users/');
  }

  async createUser(userData: Partial<User>): Promise<ApiResponse<User>> {
    return this.request<User>('/users/', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  }

  async updateUser(userId: string, userData: Partial<User>): Promise<ApiResponse<User>> {
    return this.request<User>(`/users/${userId}/`, {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  }

  async deleteUser(userId: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/users/${userId}/`, {
      method: 'DELETE',
    });
  }

  // Groups management
  async getGroups(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/groups/');
  }

  async createGroup(groupData: any): Promise<ApiResponse<any>> {
    return this.request<any>('/groups/', {
      method: 'POST',
      body: JSON.stringify(groupData),
    });
  }

  // Schedule management
  async getSchedule(groupId?: string): Promise<ApiResponse<any[]>> {
    const endpoint = groupId ? `/schedule/?group=${groupId}` : '/schedule/';
    return this.request<any[]>(endpoint);
  }

  async updateSchedule(scheduleData: any): Promise<ApiResponse<any>> {
    return this.request<any>('/schedule/', {
      method: 'POST',
      body: JSON.stringify(scheduleData),
    });
  }

  // News management
  async getNews(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/news/');
  }

  async createNews(newsData: any): Promise<ApiResponse<any>> {
    try {
      const token = await AsyncStorage.getItem('authToken');
      const url = `${API_BASE_URL}/news/`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º FormData
      if (newsData.image) {
        const formData = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è –Ω–æ–≤–æ—Å—Ç–∏
        formData.append('title', newsData.title);
        formData.append('subtitle', newsData.subtitle || '');
        formData.append('content', newsData.content);
        formData.append('category', newsData.category);
        if (newsData.icon) {
          formData.append('icon', newsData.icon);
        }
        if (newsData.is_important !== undefined) {
          formData.append('is_important', newsData.is_important.toString());
        }

        const imageUri = newsData.image.uri;
        const timestamp = Date.now();
        const filename = `news_${timestamp}.jpg`;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (!imageUri) {
          console.warn('Image URI is missing, skipping image upload');
        } else {
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è FormData
          const imageFile = {
            uri: imageUri,
            type: newsData.image.type || 'image/jpeg',
            name: filename,
          } as any;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
          formData.append('image', imageFile);
          console.log('Image added to FormData:', { uri: imageUri, name: filename });
        }

        const apiResponse = await fetch(url, {
          method: 'POST',
          headers: {
            'Authorization': token ? `Bearer ${token}` : '',
            // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è multipart/form-data
          },
          body: formData,
        });

        const data = await apiResponse.json();

        if (!apiResponse.ok) {
          return {
            success: false,
            error: data.error || data.message || `HTTP ${apiResponse.status}`,
          };
        }

        return {
          success: true,
          data: data.data || data,
        };
      } else {
        // –ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π JSON
        return this.request<any>('/news/', {
          method: 'POST',
          body: JSON.stringify(newsData),
        });
      }
    } catch (error) {
      console.error('Create news error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      };
    }
  }

  async updateNews(newsId: string, newsData: any): Promise<ApiResponse<any>> {
    return this.request<any>(`/news/${newsId}/`, {
      method: 'PUT',
      body: JSON.stringify(newsData),
    });
  }

  async deleteNews(newsId: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/news/${newsId}/`, {
      method: 'DELETE',
    });
  }

  // Events management
  async getEvents(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/events/');
  }

  async createEvent(eventData: any): Promise<ApiResponse<any>> {
    try {
      const token = await AsyncStorage.getItem('authToken');
      const url = `${API_BASE_URL}/events/`;


      if (eventData.image) {
        const formData = new FormData();
        formData.append('title', eventData.title);
        formData.append('description', eventData.description);
        formData.append('location', eventData.location);
        formData.append('date', eventData.date);
        formData.append('time', eventData.time);
        formData.append('category', eventData.category);
        if (eventData.max_participants) {
          formData.append('max_participants', eventData.max_participants.toString());
        }

        let imageUri = eventData.image.uri;

        if (!imageUri) {
          if (__DEV__) {
            console.warn('‚ö†Ô∏è createEvent(): image object missing uri');
          }
        } else if (imageUri.startsWith('/')) {
          // Normalize plain path to file:// for Android
            imageUri = 'file://' + imageUri;
        }

        const now = new Date();
        const filename = `evt_${now.getTime()}.jpg`;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (!imageUri) {
          console.warn('Event image URI is missing, skipping image upload');
        } else {
          // React Native-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
          const imageFile = {
            uri: imageUri,
            type: eventData.image.type || 'image/jpeg',
            name: filename,
          } as any;
          
          // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ FormData
          formData.append('image', imageFile);
          console.log('Event image added to FormData:', { uri: imageUri, name: filename });
        }

        let apiResponse: Response;
        try {
          apiResponse = await fetch(url, {
            method: 'POST',
            headers: {
              'Authorization': token ? `Bearer ${token}` : '',
            },
            body: formData,
          });
        } catch (networkErr: any) {
          if (__DEV__) {
            console.error('üåê createEvent(): network layer failure', networkErr?.message || networkErr);
          }
          try {
            const fallback = await this.request<any>('/events/', {
              method: 'POST',
              body: JSON.stringify({
                title: eventData.title,
                description: eventData.description,
                location: eventData.location,
                date: eventData.date,
                time: eventData.time,
                category: eventData.category,
                max_participants: eventData.max_participants,
              }),
            });
            if (fallback.success) {
              return { success: true, data: fallback.data, error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (fallback)' };
            }
            return { success: false, error: '–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (multipart) –∏ fallback –Ω–µ —É–¥–∞–ª—Å—è' };
          } catch (fbErr) {
            if (__DEV__) {
              console.error('‚ùå createEvent(): fallback failed', fbErr);
            }
            return { success: false, error: '–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (multipart)' };
          }
        }

        let data: any = null;
        try {
          data = await apiResponse.json();
        } catch (parseErr) {
          if (__DEV__) {
            console.error('üß© createEvent(): JSON parse failed', parseErr);
          }
        }

        if (!apiResponse.ok) {
          if (__DEV__) {
            console.error('‚ùå createEvent(): server responded with error status', apiResponse.status, data);
          }
          return { success: false, error: data?.error || data?.message || `HTTP ${apiResponse.status}` };
        }

        return { success: true, data: data?.data || data };
      } else {
        return this.request<any>('/events/', {
          method: 'POST',
          body: JSON.stringify(eventData),
        });
      }
    } catch (error) {
      console.error('Create event error:', error);
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º',
      };
    }
  }

  async updateEvent(eventId: string, eventData: any): Promise<ApiResponse<any>> {
    return this.request<any>(`/events/${eventId}/`, {
      method: 'PUT',
      body: JSON.stringify(eventData),
    });
  }

  async deleteEvent(eventId: string): Promise<ApiResponse<void>> {
    try {
      
      const token = await AsyncStorage.getItem('authToken');
      const headers: Record<string, string> = {};
      
      if (token && token !== 'undefined' && token !== 'null') {
        headers.Authorization = `Token ${token}`;
      }
      
      const url = `${API_BASE_URL}/events/${eventId}/`;
      
      
      const response = await fetch(url, {
        method: 'DELETE',
        headers: headers,
      });


      // DELETE –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 204 –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –ø–æ—ç—Ç–æ–º—É –Ω–µ –ø–∞—Ä—Å–∏–º JSON
      if (response.ok) {
        return {
          success: true,
          data: undefined as any,
        };
      } else {
        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å JSON
        try {
          const data = await response.json();
          return {
            success: false,
            error: data.error || data.message || `HTTP ${response.status}`,
          };
        } catch (parseError) {

          return {
            success: false,
            error: `HTTP ${response.status}`,
          };
        }
      }
    } catch (error) {
      return {
        success: false,
        error: 'Network error occurred',
      };
    }
  }

  // –ö–µ—à–∏—Ä—É–µ–º dashboard –¥–∞–Ω–Ω—ã–µ
  private dashboardPromise: Promise<ApiResponse<any>> | null = null;
  private dashboardCache: { data: ApiResponse<any>; timestamp: number } | null = null;
  private readonly DASHBOARD_CACHE_DURATION = 60000; // 1 –º–∏–Ω—É—Ç–∞

  // Dashboard API
  async getDashboard(): Promise<ApiResponse<{
    news: Array<{ id: number; title: string; description: string; image: string | null; date: string }>;
    events: Array<{ id: number; title: string; date: string; image: string | null }>;
    courses: Array<{ id: number; name: string; progress: number }>;
    gpa: number;
    attendance: number;
  }>> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.dashboardCache && 
        Date.now() - this.dashboardCache.timestamp < this.DASHBOARD_CACHE_DURATION) {
      return this.dashboardCache.data;
    }

    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.dashboardPromise) {
      return this.dashboardPromise;
    }


    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    this.dashboardPromise = this.request('/users/dashboard/')
      .then((result) => {
        // –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (result.success) {
          this.dashboardCache = {
            data: result,
            timestamp: Date.now()
          };
        }
        
        
        return result;
      })
      .finally(() => {
        // –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–∏—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        this.dashboardPromise = null;
      });

    return this.dashboardPromise;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ dashboard
  clearDashboardCache(): void {
    this.dashboardCache = null;
    this.dashboardPromise = null;
  }

  async getGrades(): Promise<ApiResponse<any[]>> {
    const result = await this.request<any[]>('/auth/grades/');
    return result;
  }

  async getCourses(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/auth/courses/');
  }

  async getAttendance(): Promise<ApiResponse<any[]>> {
    return this.request<any[]>('/auth/attendance/');
  }

  // –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏/—Å–æ–±—ã—Ç–∏—è
  async getNewsById(id: string): Promise<ApiResponse<any>> {
    return this.request(`/news/${id}/`);
  }

  async getEventById(id: string): Promise<ApiResponse<any>> {
    return this.request(`/events/${id}/`);
  }
}

export const authApi = new ApiService();
export default ApiService;
