import { isDebugMode } from '../config/environment';
import { ApiResponse, LDAPCourse, LDAPUserProfile } from '../types';
import { ldapAuthService } from './ldapAuth';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LDAP –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–¥–æ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤, –æ—Ü–µ–Ω–æ–∫, –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ —Ç.–¥.
 */
class LDAPDataService {
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
  private coursesCache: { data: LDAPCourse[]; timestamp: number } | null = null;
  private readonly COURSES_CACHE_DURATION = 300000; // 5 –º–∏–Ω—É—Ç
  
  // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private profileCache: { data: LDAPUserProfile; timestamp: number } | null = null;
  private readonly PROFILE_CACHE_DURATION = 600000; // 10 –º–∏–Ω—É—Ç

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getStudentProfile(forceRefresh = false): Promise<ApiResponse<LDAPUserProfile>> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (!forceRefresh && this.profileCache && 
        Date.now() - this.profileCache.timestamp < this.PROFILE_CACHE_DURATION) {
      if (isDebugMode()) {
        console.log('üìã getStudentProfile: returning cached profile');
      }
      return {
        success: true,
        data: this.profileCache.data,
      };
    }

    try {
      if (isDebugMode()) {
        console.log('üìã Getting student profile from LDAP...');
      }

      const response = await ldapAuthService.getUserProfile();
      
      if (response.success && response.data) {
        // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.profileCache = {
          data: response.data,
          timestamp: Date.now(),
        };
        
        if (isDebugMode()) {
          console.log('‚úÖ Student profile retrieved successfully');
        }
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get student profile:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—É—Ä—Å—ã —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  async getActiveCourses(forceRefresh = false, params?: {
    lang?: string;
    page?: number;
    pageSize?: number;
  }): Promise<ApiResponse<{ count: number; data: LDAPCourse[] }>> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (!forceRefresh && this.coursesCache && 
        Date.now() - this.coursesCache.timestamp < this.COURSES_CACHE_DURATION) {
      if (isDebugMode()) {
        console.log('üìö getActiveCourses: returning cached courses');
      }
      return {
        success: true,
        data: {
          count: this.coursesCache.data.length,
          data: this.coursesCache.data,
        },
      };
    }

    try {
      if (isDebugMode()) {
        console.log('üìö Getting active courses from LDAP...');
      }

      const response = await ldapAuthService.getActiveCourses(params);
      
      if (response.success && response.data) {
        // –ö–µ—à–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
        this.coursesCache = {
          data: response.data.data || [],
          timestamp: Date.now(),
        };
        
        if (isDebugMode()) {
          console.log(`‚úÖ Retrieved ${response.data.count} courses`);
        }
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get active courses:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã (—Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'current')
   */
  async getCurrentCourses(forceRefresh = false): Promise<ApiResponse<LDAPCourse[]>> {
    const response = await this.getActiveCourses(forceRefresh);
    
    if (response.success && response.data) {
      const currentCourses = response.data.data.filter(course => course.status === 'current');
      return {
        success: true,
        data: currentCourses,
      };
    }

    return {
      success: false,
      error: response.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –∫—É—Ä—Å–æ–≤',
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã (—Ç–æ–ª—å–∫–æ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'past')
   */
  async getCompletedCourses(forceRefresh = false): Promise<ApiResponse<LDAPCourse[]>> {
    const response = await this.getActiveCourses(forceRefresh);
    
    if (response.success && response.data) {
      const completedCourses = response.data.data.filter(course => course.status === 'past');
      return {
        success: true,
        data: completedCourses,
      };
    }

    return {
      success: false,
      error: response.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤',
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫—É—Ä—Å–∞–º
   */
  async getCourseGrades(): Promise<ApiResponse<any[]>> {
    try {
      if (isDebugMode()) {
        console.log('üìä Getting course grades from LDAP...');
      }

      const response = await ldapAuthService.getCourseGrades();
      
      if (isDebugMode() && response.success) {
        console.log('‚úÖ Course grades retrieved successfully');
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get course grades:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
   */
  async getCourseAttendance(): Promise<ApiResponse<any[]>> {
    try {
      if (isDebugMode()) {
        console.log('üìà Getting course attendance from LDAP...');
      }

      const response = await ldapAuthService.getCourseAttendance();
      
      if (isDebugMode() && response.success) {
        console.log('‚úÖ Course attendance retrieved successfully');
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get course attendance:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async getMessages(): Promise<ApiResponse<any[]>> {
    try {
      if (isDebugMode()) {
        console.log('üí¨ Getting messages from LDAP...');
      }

      const response = await ldapAuthService.getMessages();
      
      if (isDebugMode() && response.success) {
        console.log('‚úÖ Messages retrieved successfully');
      }

      return response;
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get messages:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π',
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
   */
  async getDashboardData(): Promise<ApiResponse<{
    profile: LDAPUserProfile;
    currentCourses: LDAPCourse[];
    completedCourses: LDAPCourse[];
    grades: any[];
    attendance: any[];
  }>> {
    try {
      if (isDebugMode()) {
        console.log('üìã Getting dashboard data from LDAP...');
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [profileResponse, coursesResponse, gradesResponse, attendanceResponse] = await Promise.all([
        this.getStudentProfile(),
        this.getActiveCourses(),
        this.getCourseGrades(),
        this.getCourseAttendance(),
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã
      if (!profileResponse.success || !coursesResponse.success) {
        return {
          success: false,
          error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è',
        };
      }

      const allCourses = coursesResponse.data?.data || [];
      const currentCourses = allCourses.filter(course => course.status === 'current');
      const completedCourses = allCourses.filter(course => course.status === 'past');

      const dashboardData = {
        profile: profileResponse.data!,
        currentCourses,
        completedCourses,
        grades: gradesResponse.success ? gradesResponse.data || [] : [],
        attendance: attendanceResponse.success ? attendanceResponse.data || [] : [],
      };

      if (isDebugMode()) {
        console.log('‚úÖ Dashboard data retrieved successfully:', {
          currentCourses: currentCourses.length,
          completedCourses: completedCourses.length,
          hasGrades: dashboardData.grades.length > 0,
          hasAttendance: dashboardData.attendance.length > 0,
        });
      }

      return {
        success: true,
        data: dashboardData,
      };
    } catch (error) {
      if (isDebugMode()) {
        console.error('‚ùå Failed to get dashboard data:', error);
      }
      return {
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞',
      };
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏
   */
  clearCache(): void {
    this.coursesCache = null;
    this.profileCache = null;
    
    if (isDebugMode()) {
      console.log('üßπ LDAP data cache cleared');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –∫—É—Ä—Å–æ–≤
   */
  clearCoursesCache(): void {
    this.coursesCache = null;
    
    if (isDebugMode()) {
      console.log('üßπ LDAP courses cache cleared');
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à –ø—Ä–æ—Ñ–∏–ª—è
   */
  clearProfileCache(): void {
    this.profileCache = null;
    
    if (isDebugMode()) {
      console.log('üßπ LDAP profile cache cleared');
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const ldapDataService = new LDAPDataService();
export default LDAPDataService;
