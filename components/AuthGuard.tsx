import { Colors } from '@/constants/DesignTokens';
import { useAppDispatch, useAppSelector } from '@/hooks/redux';
import { checkAuthStatus } from '@/store/slices/authSlice';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { router, useSegments } from 'expo-router';
import React, { useCallback, useEffect, useState } from 'react';
import { ActivityIndicator, StyleSheet, View } from 'react-native';

interface AuthGuardProps {
  children: React.ReactNode;
}

export default function AuthGuard({ children }: AuthGuardProps) {
  const [isInitializing, setIsInitializing] = useState(true);
  const dispatch = useAppDispatch();
  const { isAuthenticated, loading } = useAppSelector((state) => state.auth);
  const segments = useSegments();
  
  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  const publicRoutes = ['login', 'debug'];
  const currentRoute = segments[0]; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∞
  const isPublicRoute = publicRoutes.includes(currentRoute);

  const initializeAuth = useCallback(async () => {
    console.log('[AUTH_GUARD] üöÄ Starting initialization...');

    try {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ Redux, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º AsyncStorage
      if (isAuthenticated) {
        console.log('[AUTH_GUARD] User already authenticated, skipping token check');
        setIsInitializing(false);
        return;
      }

      console.log('[AUTH_GUARD] üì± Getting token from AsyncStorage...');
      const token = await AsyncStorage.getItem('authToken');
      console.log('[AUTH_GUARD] Checking stored token:', token ? `${token.substring(0, 10)}...` : 'No token');

      if (token) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
        console.log('[AUTH_GUARD] üîç Checking auth status...');
        const result = await dispatch(checkAuthStatus());

        // –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –æ—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
        if (checkAuthStatus.rejected.match(result)) {
          console.log('[AUTH_GUARD] ‚ùå Auth check failed, clearing token and redirecting to login');
          await AsyncStorage.removeItem('authToken');
          router.replace('/login');
        } else {
          console.log('[AUTH_GUARD] ‚úÖ Auth check successful');
        }
      } else {
        // –¢–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
        console.log('[AUTH_GUARD] ‚ùå No token found, redirecting to login');
        router.replace('/login');
      }
    } catch (error) {
      console.error('[AUTH_GUARD] üí• Auth initialization error:', error);
      // –û—á–∏—â–∞–µ–º AsyncStorage –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await AsyncStorage.clear();
      router.replace('/login');
    } finally {
      console.log('[AUTH_GUARD] üèÅ Initialization finished, setting isInitializing to false');
      setIsInitializing(false);
    }
  }, [dispatch, isAuthenticated]);

  useEffect(() => {
    console.log('[AUTH_GUARD] useEffect triggered, route:', currentRoute, 'isAuthenticated:', isAuthenticated, 'isInitializing:', isInitializing);

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    if (!isInitializing) return;

    // –ï—Å–ª–∏ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    if (isPublicRoute) {
      console.log('[AUTH_GUARD] Public route detected, skipping auth check');
      setIsInitializing(false);
      return;
    }

    initializeAuth();
  }, [isInitializing, isPublicRoute, initializeAuth, currentRoute, isAuthenticated]);

  useEffect(() => {
    if (!isInitializing && !loading && !isAuthenticated && !isPublicRoute) {
      console.log('[AUTH_GUARD] Redirecting to login - not authenticated and not on public route');
      router.replace('/login');
    }
  }, [isAuthenticated, isInitializing, loading, isPublicRoute]);

  // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
  if (isPublicRoute) {
    return <>{children}</>;
  }

  if (isInitializing || loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color={Colors.brandPrimary} />
      </View>
    );
  }

  if (!isAuthenticated && !isPublicRoute) {
    return null; // –†–æ—É—Ç–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç –Ω–∞ –ª–æ–≥–∏–Ω
  }

  return <>{children}</>;
}

const styles = StyleSheet.create({
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: Colors.surface,
  },
});
