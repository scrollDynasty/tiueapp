from rest_framework import serializers
from datetime import datetime
import time
import base64
import io
from django.core.files.base import ContentFile
from .models import News, Event, EventRegistration


class EventForNewsSerializer(serializers.ModelSerializer):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ—Å—Ç—è—Ö"""
    class Meta:
        model = Event
        fields = ['id', 'title', 'date', 'time', 'location', 'category']


class NewsSerializer(serializers.ModelSerializer):
    author_name = serializers.CharField(source='author.get_full_name', read_only=True)
    date = serializers.DateTimeField(source='created_at', format='%Y-%m-%d %H:%M:%S', read_only=True)
    events = EventForNewsSerializer(many=True, read_only=True)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Å–∏, –Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º to_representation –¥–ª—è —á—Ç–µ–Ω–∏—è
    
    class Meta:
        model = News
        fields = [
            'id', 'title', 'subtitle', 'content', 'author', 'author_name',
            'category', 'icon', 'is_important', 'image', 'events', 'date', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'author', 'created_at', 'updated_at', 'author_name', 'date', 'events']
    
    def to_representation(self, instance):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        data = super().to_representation(instance)
        if instance.image:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º BASE_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (.env —Ñ–∞–π–ª–∞)
            from django.conf import settings
            base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            base_url = base_url.rstrip('/')
            image_url = instance.image.url
            if not image_url.startswith('/'):
                image_url = '/' + image_url
                
            full_url = f"{base_url}{image_url}"
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è ngrok
            if 'ngrok' in full_url and full_url.startswith('http://'):
                full_url = full_url.replace('http://', 'https://', 1)
                
            data['image'] = full_url
            print(f"üì∏ [NEWS] Generated image URL: {full_url}")
        return data
    
    def create(self, validated_data):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        validated_data['author'] = self.context['request'].user
        return super().create(validated_data)


class EventSerializer(serializers.ModelSerializer):
    created_by_name = serializers.CharField(source='created_by.get_full_name', read_only=True)
    is_registered = serializers.SerializerMethodField()
    date = serializers.CharField()  # –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞—Ç—É –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Å–∏, –Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º to_representation –¥–ª—è —á—Ç–µ–Ω–∏—è
    
    class Meta:
        model = Event
        fields = [
            'id', 'title', 'description', 'location', 'date', 'time',
            'category', 'max_participants', 'current_participants', 'image',
            'news', 'created_by', 'created_by_name', 'is_registered', 'created_at', 'updated_at'
        ]
        read_only_fields = ['id', 'created_by', 'current_participants', 'created_at', 'updated_at', 'created_by_name', 'is_registered']
    
    def to_representation(self, instance):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–≥–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        data = super().to_representation(instance)
        if instance.image:
            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º BASE_URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (.env —Ñ–∞–π–ª–∞)
            from django.conf import settings
            base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π —Å–ª–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            base_url = base_url.rstrip('/')
            image_url = instance.image.url
            if not image_url.startswith('/'):
                image_url = '/' + image_url
                
            full_url = f"{base_url}{image_url}"
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTPS –¥–ª—è ngrok
            if 'ngrok' in full_url and full_url.startswith('http://'):
                full_url = full_url.replace('http://', 'https://', 1)
                
            data['image'] = full_url
            print(f"üì∏ [EVENT] Generated image URL: {full_url}")
        return data
    
    
    def validate_date(self, value):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD.MM.YYYY –≤ YYYY-MM-DD"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
            if '.' in value:
                date_obj = datetime.strptime(value, '%d.%m.%Y').date()
                return date_obj
            # –ï—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            elif '-' in value:
                date_obj = datetime.strptime(value, '%Y-%m-%d').date()
                return date_obj
            else:
                raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY –∏–ª–∏ YYYY-MM-DD")
        except ValueError:
            raise serializers.ValidationError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ DD.MM.YYYY")
    
    def get_is_registered(self, obj):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
        request = self.context.get('request')
        if request and request.user.is_authenticated:
            return EventRegistration.objects.filter(
                user=request.user, 
                event=obj
            ).exists()
        return False
    
    def create(self, validated_data):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        validated_data['created_by'] = self.context['request'].user
        return super().create(validated_data)


class EventRegistrationSerializer(serializers.ModelSerializer):
    event_title = serializers.CharField(source='event.title', read_only=True)
    user_name = serializers.CharField(source='user.get_full_name', read_only=True)
    
    class Meta:
        model = EventRegistration
        fields = ['id', 'user', 'event', 'event_title', 'user_name', 'registered_at']
        read_only_fields = ['id', 'registered_at', 'event_title', 'user_name']
    
    def create(self, validated_data):
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
        validated_data['user'] = self.context['request'].user
        return super().create(validated_data)